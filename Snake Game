import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 400, 400
GRID_SIZE = 20
GRID_WIDTH = WIDTH // GRID_SIZE
GRID_HEIGHT = HEIGHT // GRID_SIZE

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)

# Directions
UP = (0, -1)
DOWN = (0, 1)
LEFT = (-1, 0)
RIGHT = (1, 0)

# Initialize the screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Snake Game")

def restart_game():
    global snake, snake_direction, food, score, game_over
    snake = [(GRID_WIDTH // 2, GRID_HEIGHT // 2)]
    snake_direction = RIGHT
    food = (random.randint(0, GRID_WIDTH - 1), random.randint(0, GRID_HEIGHT - 1))
    score = 0
    game_over = False

# Initialize variables
loading = True
restart_game()

# Load high scores from a file
def load_high_scores():
    try:
        with open("high_scores.txt", "r") as file:
            return [int(line.strip()) for line in file]
    except FileNotFoundError:
        return []

# Save high scores to a file
def save_high_scores(high_scores):
    with open("high_scores.txt", "w") as file:
        for score in high_scores:
            file.write(str(score) + "\n")

high_scores = load_high_scores()

# Game loop
clock = pygame.time.Clock()
running = True
game_over = False

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if loading:
                loading = False
            elif game_over:
                if event.key == pygame.K_r:
                    restart_game()
            else:
                if event.key == pygame.K_UP and snake_direction != DOWN:
                    snake_direction = UP
                elif event.key == pygame.K_DOWN and snake_direction != UP:
                    snake_direction = DOWN
                elif event.key == pygame.K_LEFT and snake_direction != RIGHT:
                    snake_direction = LEFT
                elif event.key == pygame.K_RIGHT and snake_direction != LEFT:
                    snake_direction = RIGHT

    if not loading:
        if not game_over:
            # Move the snake
            new_head = (snake[0][0] + snake_direction[0], snake[0][1] + snake_direction[1])
            snake.insert(0, new_head)

            # Check for collisions
            if snake[0] == food:
                score += 1
                food = (random.randint(0, GRID_WIDTH - 1), random.randint(0, GRID_HEIGHT - 1))
            else:
                snake.pop()

            # Check for collisions with walls
            if (
                snake[0][0] < 0
                or snake[0][0] >= GRID_WIDTH
                or snake[0][1] < 0
                or snake[0][1] >= GRID_HEIGHT
            ):
                game_over = True

            # Check for collisions with itself
            if len(snake) > 1 and snake[0] in snake[1:]:
                game_over = True

        # Clear the screen
        screen.fill(BLACK)

        if not game_over:
            # Draw the food
            pygame.draw.rect(
                screen, GREEN, (food[0] * GRID_SIZE, food[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE)
            )

            # Draw the snake
            for segment in snake:
                pygame.draw.rect(
                    screen,
                    WHITE,
                    (segment[0] * GRID_SIZE, segment[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE),
                )
        else:
            # Game over screen
            font = pygame.font.Font(None, 36)
            game_over_text = font.render("Game Over", True, WHITE)
            score_text = font.render(f"Score: {score}", True, WHITE)
            restart_text = font.render("Press 'R' to Restart", True, WHITE)
            screen.blit(game_over_text, (WIDTH // 2 - 100, HEIGHT // 2 - 50))
            screen.blit(score_text, (WIDTH // 2 - 60, HEIGHT // 2 + 10))
            screen.blit(restart_text, (WIDTH // 2 - 120, HEIGHT // 2 + 50))

            # Update the high scores
            if score > 0:
                high_scores.append(score)
                high_scores.sort(reverse=True)
                high_scores = high_scores[:5]  # Keep the top 5 scores
                save_high_scores(high_scores)

        # Display high scores
        font = pygame.font.Font(None, 24)
        scores_text = font.render("High Scores:", True, WHITE)
        screen.blit(scores_text, (10, 10))
        y_offset = 30
        for i, high_score in enumerate(high_scores):
            score_text = font.render(f"{i + 1}. {high_score}", True, WHITE)
            screen.blit(score_text, (10, y_offset))
            y_offset += 20

    else:
        # Loading screen
        font = pygame.font.Font(None, 36)
        loading_text = font.render("Loading...", True, WHITE)
        screen.blit(loading_text, (WIDTH // 2 - 80, HEIGHT // 2 - 20))

    pygame.display.flip()

    # Cap the frame rate
    clock.tick(10)

pygame.quit()
sys.exit()
